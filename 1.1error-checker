Error checker

Recent on top

During working with longs, you often have a logic error where the code appears correct but has no output (via print f)
This is usulaly down to 3 things. 1. Not setting your counter or addup variable to zero, 2. not increminting counter by 1 at end of cycle and 3.not dividing long by 10 to access 
next digit. 


int addup = 0;
When accumulating numbers you need to initialise the variable with zero or it doesn't work.
Just having int addup; will bring strange results.

HOWEVER, this doesn't seem to be required when setting a number into a variable such as x = card % 10;. Here, the variable only needs to be declared ie int x.


When accumulating different conditions of digits and you need an end total, remember it is as below rather than just addup = (card...

addup = addup + (card % 10) * 2;

In other words, when outputing an answer at the very end, addup must be continualy acruing the digits while calculating through say a loop. 


Where you write a function and call main, do not add the int or char or char * datatype to the function call in main or it messes things up.

eg  
void myf(char * x)
Above is the prototype in the header. 
But in main you just put
	myf(x)
@@@@@@@@@@@@@@@@@@@@
cash:
while(cash >= fifty) {do this}
while(cash => fifty) {do this}
THE SECOND EXAMPLE DOESN'T WORK BECAUSE EQUAL-TO COMES BEFORE GREATER THAN!!!

credit:
To test if a credit card  number is at least greater than zero, you need to first create a long variable (say 'n') and then put 'n' into another variable
(say credit). This allows this outside 'do while n is zero' to test this properly.
It doesn't work if you initially test 'credit'. I think it's because credit continually changes as it moves through the loop. 



Often, you forget to place a comma after datatype placeholder and variable name. EG: printf("%li \n" , credit);



float and get_int.
very common to set a datatype as a float and when you want input from the user, you automatically type get_int instead of get_float.



PRINTING LONG NUMBERS
You don't need an array or loop to print out a credit card number 

eg:
int main (void)
{
    long credit = get_long("Number");
    
        printf("%li" , credit);
}
//This simply prints out the number you have inputed
//Working your way through the numbers can be done with modulo and division.



//##########################################################
When using constants, they can't be added to abbreviated arrays such as below.(error! variable-sized object may not be initialized).
HOWEVER, N in assigns can be replaced with number of variables (in the case below, '3', or it can be left blank altogether.
const int N = 3;
int main (void)
{
      int assigns[N] {43, 34, 43};
      
      printf("%i \n",  (assigns[0] + assigns[1] + assigns[2]) / N);
}

IT DOES, HOWEVER WORK IN THE EXAMPLE BELOW WHERE ARRAYS ARE LAYED OUT AND ITEMISED THUS.
const int N = 3;
int main (void)
{
      int assigns[N];
      assigns[0] = 43;
      assigns[1] = 33;
      assigns[2] = 49;
      
      printf("%i \n",  (assigns[0] + assigns[1] + assigns[2]) / N);
}


#################################################################


user input from the command line.
int main(int argc, string argv[]
'int argc counts the number of strings (arrays of strings).
'int argv stores the string values in an array (square brackets required to ensure it string argv is indeed an array.
The first value/string of the array is the name of the file <./hello>.


My speak:'Applying attributes to variables'
a = (a < 5)
'You need to 'go round the block' when attributing a new value to a variable.' You can't just all of a sudden say a < 5. You must first take a then a again, 
then the new value that is applied to it. it takes the form a = ( a    )

STOPPED HERE

*SEGMENTATION FAULTS*

3) Segmentation fault with hard coded variables.

IN this example, seg fault is returned because you hardcoded *one.
This seg fault is elimenated when you change 
char *one = "ivy" to 
char *one = get_string("String: ); (I don't know why)

 {
   char *one = "Ivy";
   char *two = one;
   one[0] = toupper(one[0]);
   printf("%s\n",one);
   printf("%s\n",two);

}

2) Can happen if you ommit [i] within a for loop condition.
Example below:
***if(!isdigit(a[i]))***It needs the [i] which can be ofter missed
bool check_digit(string a)
{
    for (int i = 0; i < strlen(a); i ++)
    {
        if(!isdigit(a[i]))
        {
            return false;
        }
    }
    return true;
}




1) Can happen when you haven't added a return value.

Example below :
The 'return 1;' at 'else', stops the program running since a certain condition is 
not met.
If you ommit 'return 1; here, you get a warning 'segmentation fault'.

###############################################
int main(int argc, string argv[])
{
   if (argc == 2  )
   {
      char* plain_text = get_string("plaintext: ");
   }

   else
   {
       printf("Error! PLEASE RE-ENTER\n");
       return 1;
   }
   int k = atoi(argv[1]);
   while (k < 1)
   {
       printf("Usage: ./caesar key\n");
   }

   while (k > 26)
   {
      k =  k % 26;
   }
}
################################################












int main(void)//create two pointers that point to the same char

{
   string nim = get_string("name:");
   string nib = nim;
   nim[0] = toupper(nim[0]);
   printf("%s\n",nib);
   printf("%s\n",nim);

}

//Where you replace get_string("name:"), with a 
//hardcoded value "blink", Although the code runs
//fine, it produces a "segmentation fault" rather 
//than the expected output.
