Cs50x_practice_21/edit/main/2.Basics

Remember to git pull before starting. 

Stick with AAtest.c in Cs50x_practice_21 for working through/categorizing code. 
Above needs sorting!

These are the headers to use for you .c file
#inlude <cs50.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
these up top.

And to this to run your code:

gcc -o AAtest /home/maurizio/Desktop/Cs50x_practice_21/AAtest.c -I../libcs50/src -L../libcs50 -lcs50
Notice that the double dots are for one directory above. 

So lets start with datatypes.c







DEAL WITH BELOW LATER. IT MAY BE USEFUL TO ADD TO THE RELEVANT DRIVE FILE

Refer to the chatgpt dialogue:
So here are the instructions to clone the cs50 library onto your laptop.
Type this into the comand line at the desired location. In your case, you created a git folder in your home directoryand cloned it there.
Please note: You need 'sudo' to have the permissions to do this task.

sudo git clone https://github.com/cs50/libcs50.git

The comand for creating the cs50 folder: sudo mkdir cs50

Ok so this is where things might get a little complicated.
Since it is much easier to compile your programs within the newly cloned cs50 library, this is what we will do. 

So we will not move away from git_cs50_practice_2021 and move over to home/cs50. We can then copy files over to other relevant locations.


#include <cs50.h>//These are Libraries with access to get_string etc
#include <stdio.h>//Means standerd input/output for access to printf etc
#include <cs50.h>
#include <string.h>
#include <ctype.h>
//Ask someone their name and print "hello" and their name

int main(void)
{
    char * sink = get_string("What is your name? ");
    
    printf("Hello %s \n ", sink);// printf is taking two inputs (separated by a coma). AKA arguments or peramatures.
}
// %s is a placeholder for a variable

//ALTERNATIVE TO ABOVE
int main(void)
{
    printf("Hello %s \n ", get_string("What is your name? "));
}
// Not as tidy but shows you can plug the get_string function straight into the printf function as an input


void my(); //Interestingly, the input of the prototype can remain blank and it still works.
int main()
{
    my("David");//Hard-code the input string 
}
void my(char * x)//Make sure the datatype is a string
{
    printf("hello %s \n" , x);
}

//##################################
//Remember to always create your own function after testing it in main
//Ask someone their name and print "hello" and their name
//Ultimately, do this by returning a value from your function and saving the value in a variable in main and print it out
char * my(char * x);
int main()
{
    char * ih = get_string("what is your name? ");
    char * b = my(ih);
   printf("Hello %s \n " , b );
}

char* my(char * x)
{
    return x;
}



